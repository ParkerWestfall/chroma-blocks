"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMiddleware;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _isGenerator = _interopRequireDefault(require("./is-generator"));

var _castError = _interopRequireDefault(require("./cast-error"));

/**
 * Internal dependencies
 */

/**
 * Creates a Redux middleware, given an object of controls where each key is an
 * action type for which to act upon, the value a function which returns either
 * a promise which is to resolve when evaluation of the action should continue,
 * or a value. The value or resolved promise value is assigned on the return
 * value of the yield assignment. If the control handler returns undefined, the
 * execution is not continued.
 *
 * @param {Object} controls Object of control handlers.
 *
 * @return {Function} Redux middleware function.
 */
function createMiddleware() {
  var controls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (store) {
    return function (next) {
      return function (action) {
        if (!(0, _isGenerator.default)(action)) {
          return next(action);
        }

        function step(nextAction) {
          if (!nextAction) {
            return;
          }

          var control = controls[nextAction.type];

          if (typeof control === 'function') {
            var routine = control(nextAction);

            if (routine instanceof _promise.default) {
              // Async control routine awaits resolution.
              routine.then(function (result) {
                return step(action.next(result).value);
              }, function (error) {
                return action.throw((0, _castError.default)(error));
              });
            } else if (routine !== undefined) {
              // Sync control routine steps synchronously.
              step(action.next(routine).value);
            }
          } else {
            // Uncontrolled action is dispatched.
            store.dispatch(nextAction);
            step(action.next().value);
          }
        }

        step(action.next().value);
      };
    };
  };
}
//# sourceMappingURL=index.js.map