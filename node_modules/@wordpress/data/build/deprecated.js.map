{"version":3,"sources":["/Users/gziolo/PhpstormProjects/gutenberg/packages/data/src/deprecated.js"],"names":["withRehydration","reducer","reducerKey","storageKey","version","plugin","hint","enhancedReducer","state","action","nextState","type","payload","loadAndPersist","store","persist","persistence","createPersistenceInterface","persisted","get","persistedState","undefined","JSON","parse","dispatch","currentStateValue","getState","subscribe","newStateValue","stateToSave","set","restrictPersistence","keyToPersist","alternative","__deprecatedKeyToPersist","setPersistenceStorage","storage","originalCreatePersistenceInterface","options"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport * as persistence from './plugins/persistence';\n\n/**\n * Adds the rehydration behavior to redux reducers.\n *\n * @param {Function} reducer    The reducer to enhance.\n * @param {string}   reducerKey The reducer key to persist.\n * @param {string}   storageKey The storage key to use.\n *\n * @return {Function} Enhanced reducer.\n */\nexport function withRehydration( reducer, reducerKey, storageKey ) {\n\tdeprecated( 'wp.data.withRehydration', {\n\t\tversion: '3.6',\n\t\tplugin: 'Gutenberg',\n\t\thint: 'See https://github.com/WordPress/gutenberg/pull/8146 for more details',\n\t} );\n\n\t// EnhancedReducer with auto-rehydration\n\tconst enhancedReducer = ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( action.type === 'REDUX_REHYDRATE' && action.storageKey === storageKey ) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\t[ reducerKey ]: action.payload,\n\t\t\t};\n\t\t}\n\n\t\treturn nextState;\n\t};\n\n\treturn enhancedReducer;\n}\n\n/**\n * Loads the initial state and persist on changes.\n *\n * This should be executed after the reducer's registration.\n *\n * @param {Object}   store      Store to enhance.\n * @param {Function} reducer    The reducer function. Used to get default values and to allow custom serialization by the reducers.\n * @param {string}   reducerKey The reducer key to persist (example: reducerKey.subReducerKey).\n * @param {string}   storageKey The storage key to use.\n */\nexport function loadAndPersist( store, reducer, reducerKey, storageKey ) {\n\tdeprecated( 'wp.data.loadAndPersist', {\n\t\tversion: '3.6',\n\t\tplugin: 'Gutenberg',\n\t\thint: 'See https://github.com/WordPress/gutenberg/pull/8146 for more details',\n\t} );\n\n\tconst persist = persistence.createPersistenceInterface( { storageKey } );\n\n\t// Load initially persisted value\n\tconst persisted = persist.get();\n\tif ( persisted ) {\n\t\tconst persistedState = {\n\t\t\t...get( reducer( undefined, { type: '@@gutenberg/init' } ), reducerKey ),\n\t\t\t...JSON.parse( persisted ),\n\t\t};\n\n\t\tstore.dispatch( {\n\t\t\ttype: 'REDUX_REHYDRATE',\n\t\t\tpayload: persistedState,\n\t\t\tstorageKey,\n\t\t} );\n\t}\n\n\t// Persist updated preferences\n\tlet currentStateValue = get( store.getState(), reducerKey );\n\tstore.subscribe( () => {\n\t\tconst newStateValue = get( store.getState(), reducerKey );\n\t\tif ( newStateValue !== currentStateValue ) {\n\t\t\tcurrentStateValue = newStateValue;\n\t\t\tconst stateToSave = get( reducer( store.getState(), { type: 'SERIALIZE' } ), reducerKey );\n\t\t\tpersist.set( stateToSave );\n\t\t}\n\t} );\n}\n\n/**\n * Higher-order reducer used to persist just one key from the reducer state.\n *\n * @param {function} reducer    Reducer function.\n * @param {string} keyToPersist The reducer key to persist.\n *\n * @return {function} Updated reducer.\n */\nexport function restrictPersistence( reducer, keyToPersist ) {\n\tdeprecated( 'wp.data.restrictPersistence', {\n\t\talternative: 'registerStore persist option with persistence plugin',\n\t\tversion: '3.7',\n\t\tplugin: 'Gutenberg',\n\t\thint: 'See https://github.com/WordPress/gutenberg/pull/8341 for more details',\n\t} );\n\n\treducer.__deprecatedKeyToPersist = keyToPersist;\n\n\treturn reducer;\n}\n\n/**\n * Sets a different persistence storage.\n *\n * @param {Object} storage Persistence storage.\n */\nexport function setPersistenceStorage( storage ) {\n\tdeprecated( 'wp.data.setPersistenceStorage', {\n\t\talternative: 'persistence plugin with storage option',\n\t\tversion: '3.7',\n\t\tplugin: 'Gutenberg',\n\t\thint: 'See https://github.com/WordPress/gutenberg/pull/8341 for more details',\n\t} );\n\n\tconst originalCreatePersistenceInterface = persistence.createPersistenceInterface;\n\tpersistence.createPersistenceInterface = ( options ) => {\n\t\toriginalCreatePersistenceInterface( {\n\t\t\tstorage,\n\t\t\t...options,\n\t\t} );\n\t};\n}\n"]}